# -*- coding: utf-8 -*-
"""Graph_Correlação_Sensor_e_Manômetro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xzmV48-bOHAUjxFHPw1FVetnSSEo5r4B
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

##------------------------- Coeficientes P1 (manometro)
P1_a = 0.03808547
P1_b = -0.00632479
r1 = 0.12512421808959998
##------------------------- Coeficientes P2 (manometro)
P2_a = 2.9871453
P2_b = 4.43555556
r2 = 0.9567
##------------------------- Coeficientes P1 (sensor)
P1_as = -0.35379121
P1_bs = 323.29642857
rs1 = 0.12512421808959998
#-------------------------- Coeficientes P2 (sensor)
P2_as = -0.00730769
P2_bs = 321.68576923
rs2 = 0.09080621301775599
#-------------------------Coeficiente angular da relação entre P e Ps
a1 = P1_a/P1_as
a2 = P2_a/P2_as
#-------------------------Coeficiente linear da relação entre P e Ps
b1 = P1_b-((P1_a*P1_bs)/P1_as)
b2 = P2_b-((P2_a*P2_bs)/P2_as)

#--------------------------Cálculo da Incerteza Propagada
ux1 = np.array([0.49,0.43,0.43,0.81,0.58,0.56,0.47,0.41,0.37])
ux2 = np.array([0.38,0.37,0.36,0.43,0.53,0.44,0.37,0.37,0.41])

uf1 = [] #Incerteza P1
uf2 = [] #Incerteza P2

for i in ux1:
  uf1.append(np.abs(i*a1))

for i in ux2:
  uf2.append(np.abs(i*-8.44324340336201))

Ps = np.asarray([321.36,322.02,321.69,321.02,320.53,319.69,
319.02,318.69,318.02])

P = a1*Ps + b1 #Pressão em função da Leitura do Arduino

y2 = (-8.44324340336201)*Ps + 2734.1059934141495

fig,ax = plt.subplots(nrows=1,ncols=2)

ax[0].plot(Ps,P,'o',color='blue')
ax[0].set_title('Leitura Arduino x Pressão $P1$')
ax[0].set_xlabel('Leitura Arduino')
ax[0].set_ylabel('Pressão (Pa)')
ax[0].errorbar(Ps,P, yerr=uf1, mec='black',ecolor='black',capsize=2)

ax[1].plot(Ps,y2,'o',color= '#FF8C00')
ax[1].set_title('Leitura Arduino x Pressão $P2$')
ax[1].set_xlabel('Leitura Arduino')
ax[1].set_ylabel('Pressão (Pa)')
ax[1].errorbar(Ps,y2,yerr= uf2,mec='black',ecolor='black',capsize=2)
plt.subplots_adjust(left= 0.4, right = 1.8)

plt.savefig('graph.png')